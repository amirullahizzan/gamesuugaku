#include "Main.h"
#include "Game.h"
#include "Random.h"
#include "Npc.h"

//	ＮＰＣの移動スピード
#define NPC_MOV_SPEED	0.03f
//	ＮＰＣの回転スピード（度）
#define NPC_ROT_SPEED	0.5f

//---------------------------------------------------------------------------------
//	初期化処理
//---------------------------------------------------------------------------------
void Npc::Init( int model )
{
	//	渡されたデータ番号を受け取る
	m_model = model;
	//	初期座標の設定
	m_pos.set( 0.0f, 0.0f, 5.0f );
	//	初期向きの設定（Ｙ軸の回転角度を９０度にしています）
	float random_rot_y = GetRand(361);
	//m_rot.set( 0.0f, 90.0f, 0.0f );
	m_rot.set( 0.0f, random_rot_y, 0.0f );
}
//---------------------------------------------------------------------------------
//	更新処理
//	プレイヤー座標を受け取る形にします
//---------------------------------------------------------------------------------
void Npc::Update( Float3 player_pos )
{
	//	向きを変えて座標移動

	//	１：今の座標（ m_pos ）と目標座標（ player_pos ）からどの方向（角度）になるか求める
	//	１−１：今の座標から目標座標までの方向ベクトルを求める
	Float3 dir = player_pos - m_pos;
	//	１−２：このベクトル（のＸＺ）を使って角度（Ｙ軸の）を求める
	//	求めたい角度はＹ軸の回転角度（そのためにベクトルのＸＺの値を使って角度を求めます）
	//	atan2f は GetRadian_LengthYX と同じ関数です
	float goal_roty = TO_DEGREE( atan2f( dir.x, dir.z ) );

	//	２：今の向きから目標の向きまでどのくらいの角度の差があるか
	float next_roty = goal_roty - m_rot.y;
	//	上で求めた角度の差なんですがＮＰＣの向きとプレイヤーとの向きの状況によっては
	//	めっちゃ大きくなったり小さくなったりする可能性がある
	//	なので、この角度を -180.0f 〜 180.0f にしたい
	//	１８０度を越えている場合は１周分（３６０度）引く
	while( next_roty >= 180.0f )	next_roty -= 360.0f;
	while( next_roty < -180.0f )	next_roty += 360.0f;

	//	３：角度の差を見て回転させます
	if( next_roty >= NPC_ROT_SPEED ){			//	その差が回転スピード以上あったら
		m_rot.y += NPC_ROT_SPEED;				//	そのスピードでプラス回転させる
	}else if( next_roty <= -NPC_ROT_SPEED ){	//	回転スピードよりもマイナス
		m_rot.y -= NPC_ROT_SPEED;				//	マイナス回転させる
	}else{										//	じゃない時（ほぼ正面の時）
		m_rot.y = goal_roty;					//	目標の向きにする
	}

	//	向いている方向（ m_rot.y ）に座標移動（ＸＺ方向）
	//	Ｚ軸からの角度に対して向かいの長さが欲しいので sinf
	m_pos.x += NPC_MOV_SPEED * sinf( TO_RADIAN( m_rot.y ) );
	//	角度に沿った方の長さなので cosf
	m_pos.z += NPC_MOV_SPEED * cosf( TO_RADIAN( m_rot.y ) );
}
//---------------------------------------------------------------------------------
//	描画処理
//---------------------------------------------------------------------------------
void Npc::Render()
{
	//	モデルの座標を設定する
	MV1SetPosition( m_model, VGet( m_pos.x, m_pos.y, m_pos.z ) );
	//	モデルの向きを設定する
	MV1SetRotationXYZ( m_model, VGet( TO_RADIAN( m_rot.x ), TO_RADIAN( m_rot.y ), TO_RADIAN( m_rot.z ) ) );
	//	モデルを描画する
	MV1DrawModel( m_model );
}
//---------------------------------------------------------------------------------
//	終了処理
//---------------------------------------------------------------------------------
void Npc::Exit()
{
}
