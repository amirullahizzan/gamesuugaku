#include "Main.h"
#include "Game.h"
#include "Camera.h"

//---------------------------------------------------------------------------------
//	初期化処理
//---------------------------------------------------------------------------------
void Camera::Init()
{
	//	カメラ座標の初期設定
	//	x = 0.0f y = 20.0f z = -30.0f
	m_pos.set( 0.0f, 20.0f, -30.0f );
	//	見る座標の初期設定
	//	x = 0.0f y = 0.0f z = 0.0f
	m_look.clear();
	//	全体を見るカメラで開始
	m_type = TYPE_STAGE;
}
//---------------------------------------------------------------------------------
//	更新処理（座標を受け取れるように引数追加）
//---------------------------------------------------------------------------------
void Camera::Update( Float3 player_pos )
{
	//	Ｆ１・Ｆ２キーでカメラタイプの切り替え
	if( PushHitKey( KEY_INPUT_F1 ) )	m_type = TYPE_STAGE;
	if( PushHitKey( KEY_INPUT_F2 ) )	m_type = TYPE_PLAYER;

	const float MAX_Y_LOOK = 0;

	//	タイプによってカメラ座標や見る座標の設定を分けます
	switch( m_type ){
	case TYPE_STAGE:
		//	カメラ座標
		m_pos.set( 0.0f, 20.0f, -30.0f );
		//	見る座標
		m_look.clear();
		break;

	case TYPE_PLAYER:
		//	見る座標はプレイヤー座標
		//	カメラ座標は見る座標から一定離れたところ
		
		m_look.set( player_pos );
		m_pos.x = m_look.x +  0.0f;
		m_pos.z = m_look.z - 15.0f;
		if (player_pos.y > 0)
		{
			//m_pos.y = 0;
			m_look.y = 0;
		}
		m_pos.y = m_look.y + 7.0f;
		break;
	}
}
//---------------------------------------------------------------------------------
//	描画処理
//---------------------------------------------------------------------------------
void Camera::Render()
{
	//	カメラ座標と見る座標を渡してカメラ設定
	SetCameraPositionAndTarget_UpVecY( VGet( m_pos.x, m_pos.y, m_pos.z ), VGet( m_look.x, m_look.y, m_look.z ) );
}
//---------------------------------------------------------------------------------
//	終了処理
//---------------------------------------------------------------------------------
void Camera::Exit()
{
}
